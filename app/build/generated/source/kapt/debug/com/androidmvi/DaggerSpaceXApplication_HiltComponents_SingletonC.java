// Generated by Dagger (https://dagger.dev).
package com.androidmvi;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.androidmvi.network.injection.NetworkModule;
import com.androidmvi.network.injection.NetworkModule_GetOkHttpClientFactory;
import com.androidmvi.network.injection.NetworkModule_GetRetrofitFactory;
import com.androidmvi.network.injection.NetworkModule_GetSharedPreferenceFactory;
import com.androidmvi.network.injection.NetworkModule_GetSpaceXAPIFactory;
import com.androidmvi.spacex.network.api.SpaceXApi;
import com.androidmvi.spacex.network.repository.RocketsListRepository;
import com.androidmvi.spacex.network.usecase.RocketDetailsUseCase;
import com.androidmvi.spacex.network.usecase.RocketListUseCase;
import com.androidmvi.spacex.splash.SplashActivity;
import com.androidmvi.spacex.splash.SplashFragment;
import com.androidmvi.spacex.ui.MainActivity;
import com.androidmvi.spacex.ui.fragments.RocketDetailsFragment;
import com.androidmvi.spacex.ui.fragments.RocketDetailsFragment_MembersInjector;
import com.androidmvi.spacex.ui.fragments.RocketListFragment;
import com.androidmvi.spacex.ui.fragments.RocketListFragment_MembersInjector;
import com.androidmvi.spacex.ui.injection.CustomViewModelFactory;
import com.androidmvi.spacex.ui.injection.ViewModuleInjects;
import com.androidmvi.spacex.ui.injection.ViewModuleInjects_RocketDetailsViewModelFactory;
import com.androidmvi.spacex.ui.injection.ViewModuleInjects_RocketListViewModelFactory;
import com.androidmvi.spacex.ui.viewmodel.RocketDetailsViewModel;
import com.androidmvi.spacex.ui.viewmodel.RocketListViewModel;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSpaceXApplication_HiltComponents_SingletonC extends SpaceXApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC = this;

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object spaceXApi = new MemoizedSentinel();

  private volatile Object rocketsListRepository = new MemoizedSentinel();

  private volatile Object sharedPreferences = new MemoizedSentinel();

  private volatile Provider<ViewModel> rocketListViewModelProvider;

  private volatile Provider<ViewModel> rocketDetailsViewModelProvider;

  private DaggerSpaceXApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_GetOkHttpClientFactory.getOkHttpClient();
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_GetRetrofitFactory.getRetrofit(okHttpClient());
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private SpaceXApi spaceXApi() {
    Object local = spaceXApi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = spaceXApi;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_GetSpaceXAPIFactory.getSpaceXAPI(retrofit());
          spaceXApi = DoubleCheck.reentrantCheck(spaceXApi, local);
        }
      }
    }
    return (SpaceXApi) local;
  }

  private RocketListUseCase rocketListUseCase() {
    return new RocketListUseCase(spaceXApi());
  }

  private RocketsListRepository rocketsListRepository() {
    Object local = rocketsListRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = rocketsListRepository;
        if (local instanceof MemoizedSentinel) {
          local = new RocketsListRepository(rocketListUseCase());
          rocketsListRepository = DoubleCheck.reentrantCheck(rocketsListRepository, local);
        }
      }
    }
    return (RocketsListRepository) local;
  }

  private ViewModel rocketListViewModel() {
    return ViewModuleInjects_RocketListViewModelFactory.rocketListViewModel(rocketsListRepository());
  }

  private Provider<ViewModel> rocketListViewModelProvider() {
    Object local = rocketListViewModelProvider;
    if (local == null) {
      local = new SwitchingProvider<>(singletonC, 0);
      rocketListViewModelProvider = (Provider<ViewModel>) local;
    }
    return (Provider<ViewModel>) local;
  }

  private RocketDetailsUseCase rocketDetailsUseCase() {
    return new RocketDetailsUseCase(spaceXApi());
  }

  private ViewModel rocketDetailsViewModel() {
    return ViewModuleInjects_RocketDetailsViewModelFactory.rocketDetailsViewModel(rocketDetailsUseCase());
  }

  private Provider<ViewModel> rocketDetailsViewModelProvider() {
    Object local = rocketDetailsViewModelProvider;
    if (local == null) {
      local = new SwitchingProvider<>(singletonC, 1);
      rocketDetailsViewModelProvider = (Provider<ViewModel>) local;
    }
    return (Provider<ViewModel>) local;
  }

  private SharedPreferences sharedPreferences() {
    Object local = sharedPreferences;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = sharedPreferences;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_GetSharedPreferenceFactory.getSharedPreference(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          sharedPreferences = DoubleCheck.reentrantCheck(sharedPreferences, local);
        }
      }
    }
    return (SharedPreferences) local;
  }

  @Override
  public void injectSpaceXApplication(SpaceXApplication spaceXApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder viewModuleInjects(ViewModuleInjects viewModuleInjects) {
      Preconditions.checkNotNull(viewModuleInjects);
      return this;
    }

    public SpaceXApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerSpaceXApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements SpaceXApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public SpaceXApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityRetainedCImpl extends SpaceXApplication_HiltComponents.ActivityRetainedC {
    private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;


    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private static final class ActivityCBuilder implements SpaceXApplication_HiltComponents.ActivityC.Builder {
      private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private Activity activity;

      private ActivityCBuilder(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public SpaceXApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
      }
    }

    private static final class ActivityCImpl extends SpaceXApplication_HiltComponents.ActivityC {
      private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl = this;

      private ActivityCImpl(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      @Override
      public void injectSplashActivity(SplashActivity splashActivity) {
      }

      @Override
      public void injectMainActivity(MainActivity arg0) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
      }

      @Override
      public Set<String> getViewModelKeys() {
        return Collections.<String>emptySet();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      private static final class FragmentCBuilder implements SpaceXApplication_HiltComponents.FragmentC.Builder {
        private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private Fragment fragment;

        private FragmentCBuilder(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public SpaceXApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragment);
        }
      }

      private static final class FragmentCI extends SpaceXApplication_HiltComponents.FragmentC {
        private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final FragmentCI fragmentCI = this;

        private FragmentCI(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            Fragment fragmentParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }

        private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
            ) {
          return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(RocketListViewModel.class, singletonC.rocketListViewModelProvider()).put(RocketDetailsViewModel.class, singletonC.rocketDetailsViewModelProvider()).build();
        }

        private CustomViewModelFactory customViewModelFactory() {
          return new CustomViewModelFactory(mapOfClassOfAndProviderOfViewModel());
        }

        @Override
        public void injectSplashFragment(SplashFragment splashFragment) {
        }

        @Override
        public void injectRocketDetailsFragment(RocketDetailsFragment arg0) {
          injectRocketDetailsFragment2(arg0);
        }

        @Override
        public void injectRocketListFragment(RocketListFragment arg0) {
          injectRocketListFragment2(arg0);
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return activityCImpl.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI);
        }

        private RocketDetailsFragment injectRocketDetailsFragment2(RocketDetailsFragment instance) {
          RocketDetailsFragment_MembersInjector.injectCustomViewModelFactory(instance, customViewModelFactory());
          return instance;
        }

        private RocketListFragment injectRocketListFragment2(RocketListFragment instance) {
          RocketListFragment_MembersInjector.injectCustomViewModelFactory(instance, customViewModelFactory());
          RocketListFragment_MembersInjector.injectSharedPreferences(instance, singletonC.sharedPreferences());
          return instance;
        }

        private static final class ViewWithFragmentCBuilder implements SpaceXApplication_HiltComponents.ViewWithFragmentC.Builder {
          private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private View view;

          private ViewWithFragmentCBuilder(
              DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;
          }

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public SpaceXApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI, view);
          }
        }

        private static final class ViewWithFragmentCI extends SpaceXApplication_HiltComponents.ViewWithFragmentC {
          private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private final ViewWithFragmentCI viewWithFragmentCI = this;

          private ViewWithFragmentCI(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI, View viewParam) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;


          }
        }
      }

      private static final class ViewCBuilder implements SpaceXApplication_HiltComponents.ViewC.Builder {
        private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private View view;

        private ViewCBuilder(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public SpaceXApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(singletonC, activityRetainedCImpl, activityCImpl, view);
        }
      }

      private static final class ViewCI extends SpaceXApplication_HiltComponents.ViewC {
        private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final ViewCI viewCI = this;

        private ViewCI(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            View viewParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }
      }
    }

    private static final class ViewModelCBuilder implements SpaceXApplication_HiltComponents.ViewModelC.Builder {
      private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private SavedStateHandle savedStateHandle;

      private ViewModelCBuilder(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public SpaceXApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
      }
    }

    private static final class ViewModelCImpl extends SpaceXApplication_HiltComponents.ViewModelC {
      private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl = this;

      private ViewModelCImpl(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>emptyMap();
      }
    }
  }

  private static final class ServiceCBuilder implements SpaceXApplication_HiltComponents.ServiceC.Builder {
    private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public SpaceXApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ServiceCImpl extends SpaceXApplication_HiltComponents.ServiceC {
    private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerSpaceXApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerSpaceXApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // java.util.Map<java.lang.Class<? extends androidx.lifecycle.ViewModel>,javax.inject.Provider<androidx.lifecycle.ViewModel>> com.androidmvi.spacex.ui.injection.ViewModuleInjects#rocketListViewModel 
        return (T) singletonC.rocketListViewModel();

        case 1: // java.util.Map<java.lang.Class<? extends androidx.lifecycle.ViewModel>,javax.inject.Provider<androidx.lifecycle.ViewModel>> com.androidmvi.spacex.ui.injection.ViewModuleInjects#rocketDetailsViewModel 
        return (T) singletonC.rocketDetailsViewModel();

        default: throw new AssertionError(id);
      }
    }
  }
}
